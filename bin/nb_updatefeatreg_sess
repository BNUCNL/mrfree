#! /usr/bin/env python
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

"""Update feat registration for sessions
Author: Zonglei Zhen, Zetian Yang @bnu

"""

import os
import glob
import shutil
import argparse
import subprocess

from pynit.base import get_runs, get_logger


def main(): 
    parser = argparse.ArgumentParser(description="Update feat registration for sessions")
    parser.add_argument('-sf',
                        type=argparse.FileType('r'),
                        required=True,
                        help='session id file, each row contains a sessionid',
                        metavar='sessidfile')
    parser.add_argument('-df',
                        type=argparse.FileType('r'),
                        required=True,
                        help='session parenet file, each row is a parent directory',
                        metavar='sessparentdirfile')
    parser.add_argument('-fsd',
                        required=True,
                        help='functional subdirectory',
                        metavar='funcsubdir')
    parser.add_argument('-rlf',
                        help='functional run list file(default: all runs in the fsd)',
                        metavar='runlistfile')
    parser.add_argument('-feat',
                        required=True,
                        help='Feat directory in each session, such as "func.feat"',
                        metavar='featdir')
    parser.add_argument('-asd',             
                        default='3danat',
                        help='anatomical subdirectory(default: %(default)s)',
                        metavar='anatsubdir')
    parser.add_argument('-res',
                        default='2',
                        help='resolution in mm (default %(default)s)',
                        metavar='resolution')
    parser.add_argument('-regdir',
                        default='reg_fsl',
                        choices=['reg_fsl', 'reg_fs'],
                        help='reg dir name (default %(default)s)',
                        )
    parser.add_argument('-method',
                        required=True,
                        choices=['linear', 'nonlinear'],
                        help='Registration method') 
   
    args = parser.parse_args()

    logger = get_logger('updatefeatreg-sess.log')
    logger.debug(args)
    logger.info('Here we go!')

   
    
    sesspard = args.df.readline().strip()
    res = '_' + args.res + 'mm'

    if args.method == 'linear':
        srcfiles = ['highres2standard{0}.mat'.format(res)]
    elif args.method == 'nonlinear':
        srcfiles= ['highres2standard{0}.mat'.format(res),
                   'highres2standard_warp{0}.nii.gz'.format(res)]
    
    fsldir = os.getenv('FSL_DIR')
    mnistd = os.path.join(fsldir,'data','standard',
                       'MNI152_T1{0}_brain.nii.gz'.format(res))
    for sess in args.sf:
        sess = sess.strip()
        if not sess:
            continue
        logger.info('Session: {0}'.format(sess))
        fsd = os.path.join(sesspard, sess, args.fsd)
        anatreg = os.path.join(sesspard, sess, args.asd, args.regdir)
        for run in get_runs(args.rlf, fsd):
            feat = os.path.join(fsd, run, args.feat)
            funcreg = os.path.join(feat,'reg')
            shutil.copy(mnistd, os.path.join(funcreg,'standard.nii.gz'))
            for f in srcfiles:
                shutil.copy(os.path.join(anatreg, f),
                           os.path.join(funcreg,f.replace(res,'')))
            subprocess.call('fsl_sub -q veryshort.q updatefeatreg {0}'.format(feat),shell=True)
            logger.info('update feat reg: {0}'.format(feat))
    
    args.sf.close()
    args.df.close()
if __name__ == '__main__':
   main()
