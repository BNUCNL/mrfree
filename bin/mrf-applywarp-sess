#! /usr/bin/env python
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

"""Apply nonlinear registration warp for sessions
Author: Lijie Huang

"""

import os
import glob
import shutil
import argparse
import subprocess

from pynit.base import get_runs, get_logger


def main(): 
    parser = argparse.ArgumentParser(description="Apply nonlinear registration warp for sessions")
    parser.add_argument('-sf',
                        type=argparse.FileType('r'),
                        required=True,
                        help='session id file, each row contains a sessionid',
                        metavar='sessidfile')
    parser.add_argument('-df',
                        type=argparse.FileType('r'),
                        required=True,
                        help='session parenet file, each row is a parent directory',
                        metavar='sessparentdirfile')
    parser.add_argument('-fsd',
                        required=True,
                        help='functional subdirectory',
                        metavar='funcsubdir')
    parser.add_argument('-rlf',
                        help='functional run list file(default: all runs in the fsd)',
                        metavar='runlistfile')
    parser.add_argument('-feat',
                        required=True,
                        help='Feat directory in each session, such as "func.feat"',
                        metavar='featdir')
   
    args = parser.parse_args()

    logger = get_logger('applywarp-sess.log')
    logger.debug(args)
    logger.info('Here we go!')

    sesspard = args.df.readline().strip()
    imgs = ['cope', 'tstat', 'zstat', 'varcope']
    
    for sess in args.sf:
        sess = sess.strip()
        if not sess:
            continue
        logger.info('Session: {0}'.format(sess))
        fsd = os.path.join(sesspard, sess, args.fsd)
        for run in get_runs(args.rlf, fsd):
            feat = os.path.join(fsd, run, args.feat)
            funcreg = os.path.join(feat,'reg')
            refvol = os.path.join(funcreg, 'standard.nii.gz')
            warpvol = os.path.join(funcreg, 'highres2standard_warp.nii.gz')
            premat = os.path.join(funcreg, 'example_func2highres.mat')
            targdir = os.path.join(sesspard, sess, args.fsd + '.gfeat')
            subprocess.call(['mkdir', targdir])
            statsdir = os.path.join(feat, 'stats')
            fl = os.listdir(statsdir)
            file_num = len([item for item in fl if item[0:4] == 'cope'])
            for idx in range(1, file_num + 1):
                copedir = os.path.join(targdir, 'cope' + str(idx) + '.feat')
                subprocess.call(['mkdir', copedir])
                targstats = os.path.join(copedir, 'stats')
                subprocess.call(['mkdir', targstats])
                for img in imgs:
                    infile = os.path.join(statsdir, img + str(idx))
                    outfile = os.path.join(targstats, img + '1')
                    subprocess.call(['fsl_sub', '-q', 'veryshort.q', 
                                     'applywarp', '--ref=' + refvol,
                                     '--in=' + infile, '--out=' + outfile,
                                     '--warp=' + warpvol, '--premat=' + premat,
                                     '--interp=trilinear']) 
            logger.info('apply warp to: {0}'.format(feat))
    
    args.sf.close()
    args.df.close()
if __name__ == '__main__':
   main()
